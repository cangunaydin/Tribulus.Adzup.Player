@page "/"

@using Microsoft.AspNetCore.Components.Forms
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using System.IO
@using Tribulus.Adzup.Player.Blazor.PeriodicTask
@using Tribulus.Adzup.Player.FFmpeg
@using Tribulus.Adzup.Player.Shared.Model
@inject PlayerTask playerTask

@*<h3>Player</h3>*@


@*<div class="row mb-2">
	<div class="col">
		@if (@videoReader != null && @videoReader.ReadyToReadFrame)
		{
			<h5>Details</h5>
			<p>@videoReader.FrameDetails.width x @videoReader.FrameDetails.height</p>

		}
	</div>
</div>*@
<div class="canvas-container">

    <SKGLView @ref="skiaView" OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true" EnableRenderLoop="false" />

</div>


@code {
    private SKGLView? skiaView;
    private byte[]? _frameBuffer;
    private int _frameWidth;
    private int _frameHeight;
    private PlaylistFile? playlistFilePlaying;
    private List<PlaylistFile> playlistFiles = new();



    private CancellationTokenSource playingCts = new();
    private Task? playingTask;


    protected override async Task OnInitializedAsync()
    {
        playerTask.OnPlaylistChanged += ChangePlaylist;
        playerTask.Start();

        await playerTask.DoWorkAsync();

    }
    async void ChangePlaylist(List<PlaylistFile> playlistFiles)
    {
        await StopPlaying();
        this.playlistFiles = playlistFiles;
        playingCts = new CancellationTokenSource();
        playingTask = StartPlaying();

    }
    async Task StopPlaying()
    {
        if (playingCts != null)
        {
            playingCts.Cancel();
            if (playingTask != null)
                await playingTask;
            playingCts.Dispose();
            playingCts = null;
        }
    }
    void OnPaintSurface(SKPaintGLSurfaceEventArgs e)
    {
        if (_frameBuffer == null)
            return;
        if (playlistFilePlaying == null)
            return;
        // the the canvas and properties
        var canvas = e.Surface.Canvas;
        // make sure the canvas is blank

        canvas.Clear(SKColors.White);
        var canvasWidth = canvas.DeviceClipBounds.Width;
        var canvasHeight = canvas.DeviceClipBounds.Height;

        if (playlistFilePlaying.Type == PlaylistFileType.Video)
        {
            using (var data = SKData.CreateCopy(_frameBuffer))
            using (var original = new SKBitmap())
            {
                // create a new bitmap using the memory
                original.InstallPixels(new SKImageInfo(_frameWidth, _frameHeight, SKColorType.Rgba8888), data.Data);
                using (var resized = original.Resize(new SKImageInfo(canvasWidth, canvasHeight), SKFilterQuality.Medium))
                {
                    canvas.DrawBitmap(resized, 0, 0);
                }
            }
        }
        else if (playlistFilePlaying.Type == PlaylistFileType.Image)
        {
            using (var image = SKBitmap.Decode(_frameBuffer))
            {
                canvas.DrawBitmap(image, 0, 0);
            }

        }
        using (var paint = new SKPaint())
        {
            paint.TextSize = 32.0f;
            paint.IsAntialias = true;
            paint.Color = new SKColor(124, 252, 0);
            paint.IsStroke = false;

            canvas.DrawText(playlistFilePlaying.Name, 0, canvasHeight - 64.0f, paint);
        }

    }

    private async Task StartPlaying()
    {
        while (!playingCts.Token.IsCancellationRequested)
        {
            foreach (var playlistFile in playlistFiles)
            {
                playlistFilePlaying = playlistFile;
                if (playlistFile.Type == PlaylistFileType.Image)
                {
                    await PlayImageFile(playlistFile);
                }
                else if (playlistFile.Type == PlaylistFileType.Video)
                {
                    await PlayVideoFile(playlistFile);
                }


            }
        }
    }
    private async Task PlayVideoFile(PlaylistFile playlistFile)
    {

        var videoReader = new VideoReader();
        videoReader.SetFilepath(playlistFile.Path);
        var success = videoReader.Open();
        videoReader.GetFrameDetails();
        videoReader.AllocateFrameMemory();

        _frameWidth = videoReader.FrameDetails.width;
        _frameHeight = videoReader.FrameDetails.height;

        await RenderVideo(videoReader);


        videoReader.Close();
        videoReader.Dispose();
    }
    private async Task RenderVideo(VideoReader videoReader)
    {
        if (playingCts.Token.IsCancellationRequested)
        {
            return;
        }
        long startTime = 0;
        long nextTime = 0;
        long previousTime = 0;
        while (!playingCts.Token.IsCancellationRequested)
        {
            videoReader.ReadFrame();
            _frameBuffer = videoReader._frameBuffer;
            if (videoReader.Frame.pts == 0)
                startTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();

            var ptsInMs = (long)(videoReader.Frame.pts_seconds * 1000);
            var now = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
            nextTime = startTime + ptsInMs;
            if (previousTime == nextTime)
            {
                break;
            }
            previousTime = nextTime;
            skiaView.Invalidate();
            if (nextTime > now)
                await Task.Delay((int)(nextTime - now));
        }
    }
    private async Task PlayImageFile(PlaylistFile playlistFile)
    {
        _frameBuffer = playlistFile.FileBytes;
        skiaView.Invalidate();
        try
        {
            await Task.Delay(playlistFile.Duration, playingCts.Token);
        }
        catch (OperationCanceledException)
        {
            return;
        }
    }
}
